[["index.html", "Data Science for Conservation Chapter 1 About us", " Data Science for Conservation Laura Melissa Guzman &amp; Juan Zuloaga 2020-11-17 Chapter 1 About us This book has a series of workshops for learning data science that will be useful for conservation practitioners and researchers. Logo of ecodiversa "],["introduction-to-r.html", "Chapter 2 Introduction to R 2.1 Before you start 2.2 Getting around Rstudio 2.3 R as a calculator 2.4 Functions 2.5 Mathematical constants 2.6 What is an object in R", " Chapter 2 Introduction to R 2.1 Before you start Make sure you have R and RStudio installed. If you have a mac, you also need to install Xtools from the app store. If you have windows you also need to install Rtools. 2.2 Getting around Rstudio R studio is a friendlier way to use R. When you open RStudio you will see four panes. You can open a new script by clicking File &gt; New File &gt; R Script We will work by typing in the script. 2.3 R as a calculator Now that you have seen all the potential that R has, let’s go back to the basics and get started. Let’s play with some numbers. You can use R as a plain calculator doing all of the basic operations such as addition, multiplication, division and substraction. For instance, write a expresion (say 3 + 2) and then hit the run button to execute the line. 3 + 2 ## [1] 5 You can also do multiple calculations by using the semicolon (;) to separate multiple commands 20 / 4; 14 - 8 ## [1] 5 ## [1] 6 2.3.1 Practice Practice combining operators. Can you see the difference? 14 - 8 * 2 ## [1] -2 (14 - 8) * 2 ## [1] 12 Tips! The rules for the order of operations are important. Patenthesis () first, then Exponents (powers and square roots), then Multiplication and division (left-to-right), and finally Addition and substraction (left-to-right) 2.4 Functions R has many built in functions for common operations you might have seen before such as: “sqrt”, “log”, “abs”. We will see lots of functions in R! And, R packages that are a collection of R functions. Square Root sqrt(25) ## [1] 5 Powers 3^2 ## [1] 9 Absolute value abs(-43) ## [1] 43 Natural logarithms (“log”) log(10) ## [1] 2.302585 Logarithms using base 10 log10(10) ## [1] 1 Tips! R is case sensitive, so ‘Log(10)’ will not work at all. You will get an error: Error in Log10() : could not find function “Log10” Trigonometric functions: e.g., sin (“sin”) sin(pi/2) ## [1] 1 2.5 Mathematical constants R also knows commonly used mathematical constants such as π pi ## [1] 3.141593 More generally, Functions will execute certain actions. You can call functions by writing the name of the function followed by round parenthesis (). Tips! When you are typing the name of a function, R is actively searching for functions with similar spelling, so you can select the one you are looking for. See the example below: Functions can be very useful. For instance, let’s use “round” to round the mathematical constant ‘π’ to two decimal places. round(pi, 2) ## [1] 3.14 rounds down, using “floor” function floor(19.8) ## [1] 19 rounds up, using “ceiling” function ceiling(19.8) ## [1] 20 This is your turn! Tips! Practice, practice, practice!! Hopefully you get lots of Error messages. Try to understand what are the issues and solve them. Your learning process will improve substantially 2.6 What is an object in R R is an objet-oriented program. It means that everything in R is an object. So, an object in R is a structure having some attributes (data type) and methods acting in its attributes. Let’s talk about the first part, the data type. For instance, the most basic data type in R is a vector which refers to an atomic quantity that can hold only one value. x &lt;- 1 x ## [1] 1 You can use vectors to build more complex ones. Let’s see types of vectors (modes: numeric, logic and character) Number a &lt;- 5 a ## [1] 5 You can use the function “class” to see the ‘mode’ of the object. class(a) ## [1] &quot;numeric&quot; b &lt;- 7 b ## [1] 7 Checking for numeric type b &lt;- 7 typeof(b) ## [1] &quot;double&quot; All real numbers are stored in double precision format. If you requiered integer use the function “as.integer”: b &lt;- 7 as.integer(b) ## [1] 7 s &lt;- 10.2 as.integer(s) ## [1] 10 Logical value Is a larger than b? (Remember a is 5 and b is 7) m &lt;- a &gt; b m ## [1] FALSE Is a smaller than b? n &lt;- a &lt; b n ## [1] TRUE class(n) ## [1] &quot;logical&quot; Character (string) c &lt;- &quot;rain&quot; c ## [1] &quot;rain&quot; class(c) ## [1] &quot;character&quot; Remember to use quotation marks to encapsule the string (e.g., “rain”). Otherwise you will get an error. Try it! Let’s try this. Numbers within quotation marks. d &lt;- &quot;8&quot; e &lt;- &quot;9&quot; Then, d + e (are you expecting 17?) You will get an error: Error in d + e : non-numeric argument to binary operator You can coerce these character mode objects into a number, using the function “as.numeric” as.numeric(d) + as.numeric(e) ## [1] 17 At this point you might notice that we are using this operator: &lt;- Tips! &lt;- is the preferred assigment operator in R. &lt;- always means assigment. Whereas = can mean assigment, function argument binding or case statement (you will see more details on this later on). Good practice: use &lt;- to assign values to an object. should be used together and be written without using a space. Data types Same mode Different mode 1 dimension Vector list e.g., (2,3,4,5) e.g., (3, “frog”, 3.5, FALSE) 2 dimension Matrix data frame Before entering the world of more complex data types, let’s try to understand the second part of the the object’s definition: An object in R is a structure having some attributes (data type) and methods acting in its attributes. The next slide is an example that will give you a general idea. We will come back with more examples later on. c &lt;- &quot;25&quot; class(c) ## [1] &quot;character&quot; Let’s try to perform this function sqrt(c) You will get an error: Error in sqrt(c) : non-numeric argument to mathematical function This is because “sqrt” does not work on objects of mode ‘character’. So, objects are not simply collection of data with different structures. Operations and functions are defined for speciefic classes and modes. Vectors A vector is a sequence of data elements of the same mode. Let’s use the function concatenate “c” to create a vector c(2,4,6,8,10) ## [1] 2 4 6 8 10 Let’s use the function “length” to know the number of elements in this vector length(c(2,4,6,8,10)) ## [1] 5 Let’s add this vector to an object even_numbers &lt;- c(2,4,6,8,10) even_numbers ## [1] 2 4 6 8 10 "],["reading-data-and-plotting.html", "Chapter 3 Reading data and plotting 3.1 Making your own csv file 3.2 Reading in data 3.3 Data frames 3.4 Packages 3.5 Bar plots 3.6 Histograms 3.7 Stacked histograms and boxplots 3.8 Scatterplots", " Chapter 3 Reading data and plotting 3.1 Making your own csv file A csv, stands for comma separated values, is a type of file which can be easily read by R. Most likely, the data you have collected will be in an Exel format. You can make csv’s from your Excel files. note, Juan tu tienes Excel? me ayudas a hacer la figurita en excel? 3.2 Reading in data The following dataset contains information on Australia vertebrates. Some of the information it contains is species name, body size, and elevational range. Before loading this datset, which is in csv format, click on the data called “australian_vertebrates.csv” and then click on View File. This will allow you to see how the file is structured. On the first row you will see the column names and you will see that the values between each column is separated by a comma. Now we are ready to read in the data. Note, data origin http://esapubs.org/archive/ecol/E091/181/default.htm#data https://ecologicaldata.org Juan, should we translate the df to spanish? australian_verts &lt;- read.csv(&quot;data/australian_vertebrates.csv&quot;, na.strings = &quot;.&quot;) head(australian_verts) ## TAXA SPECIES Common_name mass color_dimorphism max_lifespan endemic ## 1 BIRD Acanthiza katherina Mountain Thornbill 8.9 0 15 1 ## 2 BIRD Acanthorhynchus tenuirostris Eastern Spinebill 11.0 1 16 0 ## 3 BIRD Accipiter novaehollandiae Grey Goshawk 515.0 0 20 0 ## 4 BIRD Ailuroedus melanotis Spotted Catbird 166.0 0 20 0 ## 5 BIRD Alcedo azurea Azure Kingfisher 33.8 0 21 0 ## 6 BIRD Alcedo pusilla Little Kingfisher 14.5 0 21 0 3.3 Data frames The dataset you just loaded is a data frame. A data frame consists of multiple columns and rows. In a data frame, each column has to be the same ‘type’, but not all the columns need to be the same. 3.4 Packages A package that is very practical and produces beautiful plots is ggplot2. As you recall, a package is a set of functions that are ‘packaged’ together. First you will to instal this package, you only need to install the package once. You can use the following function: install.packages(&#39;ggplot2&#39;) Once you have installed it, you will need to ‘load it’. Loading it makes the functions available for you to use. You will need to load it every time you want to use the functions. library(ggplot2) 3.5 Bar plots 3.5.1 Do we have more birds or reptiles in our dataset? In order to answer this question we can plot our data using bar graphs. In a bar graph we have a categorical variable on the x-axis, and the count for each category on the y-axis. Since we want to count the number of birds and the number of reptiles, we can use a bar graph to visualize this differnece. ggplot(data = australian_verts) + geom_bar(aes(x = TAXA)) 3.5.2 Are there more endemic birds in Australia than reptiles? Based on the previous graph, we can fill the bars depending on the number of endemic species in each taxa. We can easily do that by filling in the bar based on the endemic status. ggplot(data = australian_verts) + geom_bar(aes(x = TAXA, fill = factor(endemic))) 3.6 Histograms 3.6.1 What is the distribution of life span of Australian vertebrates? In this question, our variable of interest is life span, which is a continous variable. As a result, we can’t use bar graphs. If we want to see the distribution of a continous variable a useful graph is a histogram. ggplot(data = australian_verts) + geom_histogram(aes(x = max_lifespan)) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Notice that the distribution of life spans is right skewed, meaning that very few species have a long life span, while lots of species have short life spans. 3.7 Stacked histograms and boxplots 3.7.1 Do frogs have a longer life span than reptiles? In order to answer this question we have to consider the two variables of interest. As in the previous questions, we are interested in the differnet taxa, which is a categorical variable. In addition, we are interested in life span which is a continous variable. We have two options when we want to plot these data, we can do multiple histograms (i.e. a histogram for every category). ggplot(data = australian_verts) + geom_histogram(aes(x = max_lifespan)) + facet_wrap(~TAXA, ncol =1) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Another option for this combination of variables is a box plot. A box plot shows the categories on the x-axis, and the distribution of the data on the y-axis. The centre of the boxplot represents the median and the box shows the 1st and 3rd quantiles. ggplot(data = australian_verts) + geom_boxplot(aes(x = TAXA, y = max_lifespan)) 3.8 Scatterplots 3.8.1 Do larger vertebrates have a longer life span? In this case we have two continous variables, the mass of the vertebrate and the life span. Here we can use scatter plots. ggplot(data = australian_verts) + geom_point(aes(x = mass, y = max_lifespan)) As you can see, some vertebrates have a very large mass, up to 40kg! A better way to visualize this data is to log transform the mass data. Log transformations allow us to visualize data that spans orders of magnitude. ggplot(data = australian_verts) + geom_point(aes(x = mass, y = max_lifespan)) + scale_x_log10() "],["references.html", "References", " References "]]
